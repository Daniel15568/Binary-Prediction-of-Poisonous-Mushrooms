{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        \n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-08T16:34:53.245028Z","iopub.execute_input":"2024-08-08T16:34:53.245677Z","iopub.status.idle":"2024-08-08T16:34:54.168361Z","shell.execute_reply.started":"2024-08-08T16:34:53.245640Z","shell.execute_reply":"2024-08-08T16:34:54.167430Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e8/sample_submission.csv\n/kaggle/input/playground-series-s4e8/train.csv\n/kaggle/input/playground-series-s4e8/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/train.csv\")\ntrain_data","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:34:54.170170Z","iopub.execute_input":"2024-08-08T16:34:54.171302Z","iopub.status.idle":"2024-08-08T16:35:06.332830Z","shell.execute_reply.started":"2024-08-08T16:34:54.171259Z","shell.execute_reply":"2024-08-08T16:35:06.331509Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"              id class  cap-diameter cap-shape cap-surface cap-color  \\\n0              0     e          8.80         f           s         u   \n1              1     p          4.51         x           h         o   \n2              2     e          6.94         f           s         b   \n3              3     e          3.88         f           y         g   \n4              4     e          5.85         x           l         w   \n...          ...   ...           ...       ...         ...       ...   \n3116940  3116940     e          9.29         f         NaN         n   \n3116941  3116941     e         10.88         s         NaN         w   \n3116942  3116942     p          7.82         x           e         e   \n3116943  3116943     e          9.45         p           i         n   \n3116944  3116944     p          3.20         x           s         g   \n\n        does-bruise-or-bleed gill-attachment gill-spacing gill-color  ...  \\\n0                          f               a            c          w  ...   \n1                          f               a            c          n  ...   \n2                          f               x            c          w  ...   \n3                          f               s          NaN          g  ...   \n4                          f               d          NaN          w  ...   \n...                      ...             ...          ...        ...  ...   \n3116940                    t             NaN          NaN          w  ...   \n3116941                    t               d            c          p  ...   \n3116942                    f               a          NaN          w  ...   \n3116943                    t               e          NaN          p  ...   \n3116944                    f               d            c          w  ...   \n\n         stem-root  stem-surface stem-color veil-type veil-color has-ring  \\\n0              NaN           NaN          w       NaN        NaN        f   \n1              NaN             y          o       NaN        NaN        t   \n2              NaN             s          n       NaN        NaN        f   \n3              NaN           NaN          w       NaN        NaN        f   \n4              NaN           NaN          w       NaN        NaN        f   \n...            ...           ...        ...       ...        ...      ...   \n3116940          b           NaN          w         u          w        t   \n3116941        NaN           NaN          w       NaN        NaN        f   \n3116942        NaN           NaN          y       NaN          w        t   \n3116943        NaN             y          w       NaN        NaN        t   \n3116944        NaN           NaN          w       NaN        NaN        f   \n\n        ring-type spore-print-color habitat season  \n0               f               NaN       d      a  \n1               z               NaN       d      w  \n2               f               NaN       l      w  \n3               f               NaN       d      u  \n4               f               NaN       g      a  \n...           ...               ...     ...    ...  \n3116940         g               NaN       d      u  \n3116941         f               NaN       d      u  \n3116942         z               NaN       d      a  \n3116943         p               NaN       d      u  \n3116944         f               NaN       g      u  \n\n[3116945 rows x 22 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>class</th>\n      <th>cap-diameter</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>does-bruise-or-bleed</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-color</th>\n      <th>...</th>\n      <th>stem-root</th>\n      <th>stem-surface</th>\n      <th>stem-color</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>has-ring</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>habitat</th>\n      <th>season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>e</td>\n      <td>8.80</td>\n      <td>f</td>\n      <td>s</td>\n      <td>u</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>p</td>\n      <td>4.51</td>\n      <td>x</td>\n      <td>h</td>\n      <td>o</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>n</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>o</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>t</td>\n      <td>z</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>e</td>\n      <td>6.94</td>\n      <td>f</td>\n      <td>s</td>\n      <td>b</td>\n      <td>f</td>\n      <td>x</td>\n      <td>c</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>s</td>\n      <td>n</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>l</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>e</td>\n      <td>3.88</td>\n      <td>f</td>\n      <td>y</td>\n      <td>g</td>\n      <td>f</td>\n      <td>s</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>5.85</td>\n      <td>x</td>\n      <td>l</td>\n      <td>w</td>\n      <td>f</td>\n      <td>d</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3116940</th>\n      <td>3116940</td>\n      <td>e</td>\n      <td>9.29</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>n</td>\n      <td>t</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>...</td>\n      <td>b</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>u</td>\n      <td>w</td>\n      <td>t</td>\n      <td>g</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116941</th>\n      <td>3116941</td>\n      <td>e</td>\n      <td>10.88</td>\n      <td>s</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>t</td>\n      <td>d</td>\n      <td>c</td>\n      <td>p</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116942</th>\n      <td>3116942</td>\n      <td>p</td>\n      <td>7.82</td>\n      <td>x</td>\n      <td>e</td>\n      <td>e</td>\n      <td>f</td>\n      <td>a</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>t</td>\n      <td>z</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>3116943</th>\n      <td>3116943</td>\n      <td>e</td>\n      <td>9.45</td>\n      <td>p</td>\n      <td>i</td>\n      <td>n</td>\n      <td>t</td>\n      <td>e</td>\n      <td>NaN</td>\n      <td>p</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>t</td>\n      <td>p</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>3116944</th>\n      <td>3116944</td>\n      <td>p</td>\n      <td>3.20</td>\n      <td>x</td>\n      <td>s</td>\n      <td>g</td>\n      <td>f</td>\n      <td>d</td>\n      <td>c</td>\n      <td>w</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>u</td>\n    </tr>\n  </tbody>\n</table>\n<p>3116945 rows × 22 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:06.335267Z","iopub.execute_input":"2024-08-08T16:35:06.335652Z","iopub.status.idle":"2024-08-08T16:35:06.355614Z","shell.execute_reply.started":"2024-08-08T16:35:06.335614Z","shell.execute_reply":"2024-08-08T16:35:06.354385Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3116945 entries, 0 to 3116944\nData columns (total 22 columns):\n #   Column                Dtype  \n---  ------                -----  \n 0   id                    int64  \n 1   class                 object \n 2   cap-diameter          float64\n 3   cap-shape             object \n 4   cap-surface           object \n 5   cap-color             object \n 6   does-bruise-or-bleed  object \n 7   gill-attachment       object \n 8   gill-spacing          object \n 9   gill-color            object \n 10  stem-height           float64\n 11  stem-width            float64\n 12  stem-root             object \n 13  stem-surface          object \n 14  stem-color            object \n 15  veil-type             object \n 16  veil-color            object \n 17  has-ring              object \n 18  ring-type             object \n 19  spore-print-color     object \n 20  habitat               object \n 21  season                object \ndtypes: float64(3), int64(1), object(18)\nmemory usage: 523.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"isn = train_data.isna().sum() > (3116946 * 0.5)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:06.356839Z","iopub.execute_input":"2024-08-08T16:35:06.357160Z","iopub.status.idle":"2024-08-08T16:35:10.775050Z","shell.execute_reply.started":"2024-08-08T16:35:06.357136Z","shell.execute_reply":"2024-08-08T16:35:10.773952Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"isn[isn].index","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:10.777606Z","iopub.execute_input":"2024-08-08T16:35:10.777987Z","iopub.status.idle":"2024-08-08T16:35:10.784868Z","shell.execute_reply.started":"2024-08-08T16:35:10.777955Z","shell.execute_reply":"2024-08-08T16:35:10.783954Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"Index(['stem-root', 'stem-surface', 'veil-type', 'veil-color',\n       'spore-print-color'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"train_data.drop(columns=isn[isn].index, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:10.786421Z","iopub.execute_input":"2024-08-08T16:35:10.787035Z","iopub.status.idle":"2024-08-08T16:35:11.321240Z","shell.execute_reply.started":"2024-08-08T16:35:10.787001Z","shell.execute_reply":"2024-08-08T16:35:11.320441Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"train_data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:11.322312Z","iopub.execute_input":"2024-08-08T16:35:11.322577Z","iopub.status.idle":"2024-08-08T16:35:15.028202Z","shell.execute_reply.started":"2024-08-08T16:35:11.322553Z","shell.execute_reply":"2024-08-08T16:35:15.027348Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"id                            0\nclass                         0\ncap-diameter                  4\ncap-shape                    40\ncap-surface              671023\ncap-color                    12\ndoes-bruise-or-bleed          8\ngill-attachment          523936\ngill-spacing            1258435\ngill-color                   57\nstem-height                   0\nstem-width                    0\nstem-color                   38\nhas-ring                     24\nring-type                128880\nhabitat                      45\nseason                        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_data['gill-attachment'].value_counts().plot(kind='bar')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:15.029398Z","iopub.execute_input":"2024-08-08T16:35:15.029713Z","iopub.status.idle":"2024-08-08T16:35:16.188458Z","shell.execute_reply.started":"2024-08-08T16:35:15.029685Z","shell.execute_reply":"2024-08-08T16:35:16.187511Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<Axes: xlabel='gill-attachment'>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"for col in train_data.columns:\n    if train_data[col].dtype == \"object\":\n        unique = train_data[col].unique()\n        value = [val for val in unique if val in train_data.columns]\n        train_data[col] = train_data[col].replace(value, np.nan)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:16.189852Z","iopub.execute_input":"2024-08-08T16:35:16.190716Z","iopub.status.idle":"2024-08-08T16:35:27.864472Z","shell.execute_reply.started":"2024-08-08T16:35:16.190673Z","shell.execute_reply":"2024-08-08T16:35:27.863581Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"train_data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:27.865740Z","iopub.execute_input":"2024-08-08T16:35:27.866021Z","iopub.status.idle":"2024-08-08T16:35:31.539700Z","shell.execute_reply.started":"2024-08-08T16:35:27.865996Z","shell.execute_reply":"2024-08-08T16:35:31.538662Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"id                            0\nclass                         0\ncap-diameter                  4\ncap-shape                    41\ncap-surface              671040\ncap-color                    31\ndoes-bruise-or-bleed          9\ngill-attachment          523943\ngill-spacing            1258437\ngill-color                   82\nstem-height                   0\nstem-width                    0\nstem-color                   43\nhas-ring                     24\nring-type                128892\nhabitat                      57\nseason                        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"exclude = ['id']\nfor col in train_data.columns:\n    if col not in exclude:\n        count = train_data[col].value_counts()\n        train_data[col] = train_data[col].apply(lambda x: np.nan if count.get(x, 0) < 1001 else x)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:35:31.546446Z","iopub.execute_input":"2024-08-08T16:35:31.546807Z","iopub.status.idle":"2024-08-08T16:40:01.368295Z","shell.execute_reply.started":"2024-08-08T16:35:31.546774Z","shell.execute_reply":"2024-08-08T16:40:01.367322Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"train_data['cap-color'].unique()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:01.369601Z","iopub.execute_input":"2024-08-08T16:40:01.369951Z","iopub.status.idle":"2024-08-08T16:40:01.505680Z","shell.execute_reply.started":"2024-08-08T16:40:01.369922Z","shell.execute_reply":"2024-08-08T16:40:01.504560Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"array(['u', 'o', 'b', 'g', 'w', 'n', 'e', 'y', 'r', 'p', 'k', 'l', nan],\n      dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"for col in train_data.columns:\n    if train_data[col].isna().sum() > 0:\n        train_data[col] = train_data[col].fillna(train_data[col].mode()[0])","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:01.507066Z","iopub.execute_input":"2024-08-08T16:40:01.507393Z","iopub.status.idle":"2024-08-08T16:40:13.325150Z","shell.execute_reply.started":"2024-08-08T16:40:01.507364Z","shell.execute_reply":"2024-08-08T16:40:13.323862Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"train_data.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:13.326565Z","iopub.execute_input":"2024-08-08T16:40:13.326871Z","iopub.status.idle":"2024-08-08T16:40:17.120860Z","shell.execute_reply.started":"2024-08-08T16:40:13.326842Z","shell.execute_reply":"2024-08-08T16:40:17.119893Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"id                      0\nclass                   0\ncap-diameter            0\ncap-shape               0\ncap-surface             0\ncap-color               0\ndoes-bruise-or-bleed    0\ngill-attachment         0\ngill-spacing            0\ngill-color              0\nstem-height             0\nstem-width              0\nstem-color              0\nhas-ring                0\nring-type               0\nhabitat                 0\nseason                  0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_data.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:17.122100Z","iopub.execute_input":"2024-08-08T16:40:17.122416Z","iopub.status.idle":"2024-08-08T16:40:17.133131Z","shell.execute_reply.started":"2024-08-08T16:40:17.122389Z","shell.execute_reply":"2024-08-08T16:40:17.131937Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3116945 entries, 0 to 3116944\nData columns (total 17 columns):\n #   Column                Dtype  \n---  ------                -----  \n 0   id                    int64  \n 1   class                 object \n 2   cap-diameter          float64\n 3   cap-shape             object \n 4   cap-surface           object \n 5   cap-color             object \n 6   does-bruise-or-bleed  object \n 7   gill-attachment       object \n 8   gill-spacing          object \n 9   gill-color            object \n 10  stem-height           float64\n 11  stem-width            float64\n 12  stem-color            object \n 13  has-ring              object \n 14  ring-type             object \n 15  habitat               object \n 16  season                object \ndtypes: float64(3), int64(1), object(13)\nmemory usage: 404.3+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import OneHotEncoder, LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:17.134748Z","iopub.execute_input":"2024-08-08T16:40:17.135075Z","iopub.status.idle":"2024-08-08T16:40:18.336569Z","shell.execute_reply.started":"2024-08-08T16:40:17.135048Z","shell.execute_reply":"2024-08-08T16:40:18.335583Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"one = OneHotEncoder(handle_unknown='ignore', sparse_output=False).set_output(transform='pandas')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:18.337766Z","iopub.execute_input":"2024-08-08T16:40:18.338133Z","iopub.status.idle":"2024-08-08T16:40:18.343336Z","shell.execute_reply.started":"2024-08-08T16:40:18.338104Z","shell.execute_reply":"2024-08-08T16:40:18.342254Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"X = train_data.drop('class', axis=1)\ny = train_data['class']","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:18.344778Z","iopub.execute_input":"2024-08-08T16:40:18.345134Z","iopub.status.idle":"2024-08-08T16:40:18.907163Z","shell.execute_reply.started":"2024-08-08T16:40:18.345102Z","shell.execute_reply":"2024-08-08T16:40:18.906367Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"X.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:18.908707Z","iopub.execute_input":"2024-08-08T16:40:18.909134Z","iopub.status.idle":"2024-08-08T16:40:18.921704Z","shell.execute_reply.started":"2024-08-08T16:40:18.909099Z","shell.execute_reply":"2024-08-08T16:40:18.920675Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3116945 entries, 0 to 3116944\nData columns (total 16 columns):\n #   Column                Dtype  \n---  ------                -----  \n 0   id                    int64  \n 1   cap-diameter          float64\n 2   cap-shape             object \n 3   cap-surface           object \n 4   cap-color             object \n 5   does-bruise-or-bleed  object \n 6   gill-attachment       object \n 7   gill-spacing          object \n 8   gill-color            object \n 9   stem-height           float64\n 10  stem-width            float64\n 11  stem-color            object \n 12  has-ring              object \n 13  ring-type             object \n 14  habitat               object \n 15  season                object \ndtypes: float64(3), int64(1), object(12)\nmemory usage: 380.5+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"encoded_dfs = []\nfor col in X.columns:\n    if X[col].dtype == 'object':\n        transformed = one.fit_transform(X[[col]])\n        transformed_df = pd.DataFrame(transformed)\n        encoded_dfs.append(transformed_df)\n    else:\n        encoded_dfs.append(X[[col]])\nX_transformed = pd.concat(encoded_dfs, axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:18.923259Z","iopub.execute_input":"2024-08-08T16:40:18.923679Z","iopub.status.idle":"2024-08-08T16:40:35.167443Z","shell.execute_reply.started":"2024-08-08T16:40:18.923639Z","shell.execute_reply":"2024-08-08T16:40:35.166575Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"X_transformed","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:35.168806Z","iopub.execute_input":"2024-08-08T16:40:35.169213Z","iopub.status.idle":"2024-08-08T16:40:36.645862Z","shell.execute_reply.started":"2024-08-08T16:40:35.169167Z","shell.execute_reply":"2024-08-08T16:40:36.644785Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"              id  cap-diameter  cap-shape_b  cap-shape_c  cap-shape_f  \\\n0              0          8.80          0.0          0.0          1.0   \n1              1          4.51          0.0          0.0          0.0   \n2              2          6.94          0.0          0.0          1.0   \n3              3          3.88          0.0          0.0          1.0   \n4              4          5.85          0.0          0.0          0.0   \n...          ...           ...          ...          ...          ...   \n3116940  3116940          9.29          0.0          0.0          1.0   \n3116941  3116941          1.49          0.0          0.0          0.0   \n3116942  3116942          7.82          0.0          0.0          0.0   \n3116943  3116943          1.49          0.0          0.0          0.0   \n3116944  3116944          3.20          0.0          0.0          0.0   \n\n         cap-shape_o  cap-shape_p  cap-shape_s  cap-shape_x  cap-surface_d  \\\n0                0.0          0.0          0.0          0.0            0.0   \n1                0.0          0.0          0.0          1.0            0.0   \n2                0.0          0.0          0.0          0.0            0.0   \n3                0.0          0.0          0.0          0.0            0.0   \n4                0.0          0.0          0.0          1.0            0.0   \n...              ...          ...          ...          ...            ...   \n3116940          0.0          0.0          0.0          0.0            0.0   \n3116941          0.0          0.0          1.0          0.0            0.0   \n3116942          0.0          0.0          0.0          1.0            0.0   \n3116943          0.0          1.0          0.0          0.0            0.0   \n3116944          0.0          0.0          0.0          1.0            0.0   \n\n         ...  habitat_h  habitat_l  habitat_m  habitat_p  habitat_u  \\\n0        ...        0.0        0.0        0.0        0.0        0.0   \n1        ...        0.0        0.0        0.0        0.0        0.0   \n2        ...        0.0        1.0        0.0        0.0        0.0   \n3        ...        0.0        0.0        0.0        0.0        0.0   \n4        ...        0.0        0.0        0.0        0.0        0.0   \n...      ...        ...        ...        ...        ...        ...   \n3116940  ...        0.0        0.0        0.0        0.0        0.0   \n3116941  ...        0.0        0.0        0.0        0.0        0.0   \n3116942  ...        0.0        0.0        0.0        0.0        0.0   \n3116943  ...        0.0        0.0        0.0        0.0        0.0   \n3116944  ...        0.0        0.0        0.0        0.0        0.0   \n\n         habitat_w  season_a  season_s  season_u  season_w  \n0              0.0       1.0       0.0       0.0       0.0  \n1              0.0       0.0       0.0       0.0       1.0  \n2              0.0       0.0       0.0       0.0       1.0  \n3              0.0       0.0       0.0       1.0       0.0  \n4              0.0       1.0       0.0       0.0       0.0  \n...            ...       ...       ...       ...       ...  \n3116940        0.0       0.0       0.0       1.0       0.0  \n3116941        0.0       0.0       0.0       1.0       0.0  \n3116942        0.0       1.0       0.0       0.0       0.0  \n3116943        0.0       0.0       0.0       1.0       0.0  \n3116944        0.0       0.0       0.0       1.0       0.0  \n\n[3116945 rows x 92 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>cap-diameter</th>\n      <th>cap-shape_b</th>\n      <th>cap-shape_c</th>\n      <th>cap-shape_f</th>\n      <th>cap-shape_o</th>\n      <th>cap-shape_p</th>\n      <th>cap-shape_s</th>\n      <th>cap-shape_x</th>\n      <th>cap-surface_d</th>\n      <th>...</th>\n      <th>habitat_h</th>\n      <th>habitat_l</th>\n      <th>habitat_m</th>\n      <th>habitat_p</th>\n      <th>habitat_u</th>\n      <th>habitat_w</th>\n      <th>season_a</th>\n      <th>season_s</th>\n      <th>season_u</th>\n      <th>season_w</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>8.80</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>4.51</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>6.94</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3.88</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>5.85</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3116940</th>\n      <td>3116940</td>\n      <td>9.29</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3116941</th>\n      <td>3116941</td>\n      <td>1.49</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3116942</th>\n      <td>3116942</td>\n      <td>7.82</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3116943</th>\n      <td>3116943</td>\n      <td>1.49</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3116944</th>\n      <td>3116944</td>\n      <td>3.20</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3116945 rows × 92 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:36.647052Z","iopub.execute_input":"2024-08-08T16:40:36.647353Z","iopub.status.idle":"2024-08-08T16:40:36.655690Z","shell.execute_reply.started":"2024-08-08T16:40:36.647325Z","shell.execute_reply":"2024-08-08T16:40:36.654439Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"0          e\n1          p\n2          e\n3          e\n4          e\n          ..\n3116940    e\n3116941    e\n3116942    p\n3116943    e\n3116944    p\nName: class, Length: 3116945, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"y = y.map({'e':0, 'p':1})","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:36.656868Z","iopub.execute_input":"2024-08-08T16:40:36.657157Z","iopub.status.idle":"2024-08-08T16:40:36.826640Z","shell.execute_reply.started":"2024-08-08T16:40:36.657132Z","shell.execute_reply":"2024-08-08T16:40:36.825623Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:36.827969Z","iopub.execute_input":"2024-08-08T16:40:36.828271Z","iopub.status.idle":"2024-08-08T16:40:36.835958Z","shell.execute_reply.started":"2024-08-08T16:40:36.828246Z","shell.execute_reply":"2024-08-08T16:40:36.834806Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"0          0\n1          1\n2          0\n3          0\n4          0\n          ..\n3116940    0\n3116941    0\n3116942    1\n3116943    0\n3116944    1\nName: class, Length: 3116945, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"import xgboost as xgb","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:36.837390Z","iopub.execute_input":"2024-08-08T16:40:36.838436Z","iopub.status.idle":"2024-08-08T16:40:36.978198Z","shell.execute_reply.started":"2024-08-08T16:40:36.838386Z","shell.execute_reply":"2024-08-08T16:40:36.977375Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def process(data):\n    isn = data.isna().sum() > (2077964 * 0.5)\n    data.drop(columns=isn[isn].index, inplace=True)\n    \n    for col in data.columns:\n        if data[col].dtype == \"object\":\n            unique = data[col].unique()\n            value = [val for val in unique if val in data.columns]\n            data[col] = data[col].replace(value, np.nan)\n    \n    exclude = ['id']\n    for col in data.columns:\n        if col not in exclude:\n            count = data[col].value_counts()\n            data[col] = data[col].apply(lambda x: np.nan if count.get(x, 0) < 1001 else x)\n            \n    for col in data.columns:\n        if data[col].isna().sum() > 0:\n            data[col] = data[col].fillna(data[col].mode()[0])\n    \n    encoded_dfs = []\n    for col in data.columns:\n        if data[col].dtype == 'object':\n            transformed = one.fit_transform(data[[col]])\n            transformed_df = pd.DataFrame(transformed)\n            encoded_dfs.append(transformed_df)\n        else:\n            encoded_dfs.append(data[[col]])\n            \n    data = pd.concat(encoded_dfs, axis=1)\n    return data","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:36.979268Z","iopub.execute_input":"2024-08-08T16:40:36.979524Z","iopub.status.idle":"2024-08-08T16:40:36.989631Z","shell.execute_reply.started":"2024-08-08T16:40:36.979502Z","shell.execute_reply":"2024-08-08T16:40:36.988711Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"test_data = pd.read_csv(\"/kaggle/input/playground-series-s4e8/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:36.990843Z","iopub.execute_input":"2024-08-08T16:40:36.991194Z","iopub.status.idle":"2024-08-08T16:40:43.302923Z","shell.execute_reply.started":"2024-08-08T16:40:36.991153Z","shell.execute_reply":"2024-08-08T16:40:43.302114Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"test_data = process(test_data)\ntest_data","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:40:43.304230Z","iopub.execute_input":"2024-08-08T16:40:43.304509Z","iopub.status.idle":"2024-08-08T16:44:02.442036Z","shell.execute_reply.started":"2024-08-08T16:40:43.304485Z","shell.execute_reply":"2024-08-08T16:44:02.440923Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"              id  cap-diameter  cap-shape_b  cap-shape_c  cap-shape_f  \\\n0        3116945          1.49          0.0          0.0          0.0   \n1        3116946          6.90          0.0          0.0          0.0   \n2        3116947          2.00          1.0          0.0          0.0   \n3        3116948          3.47          0.0          0.0          0.0   \n4        3116949          6.17          0.0          0.0          0.0   \n...          ...           ...          ...          ...          ...   \n2077959  5194904          0.88          0.0          0.0          0.0   \n2077960  5194905          3.12          0.0          0.0          0.0   \n2077961  5194906          5.73          0.0          0.0          0.0   \n2077962  5194907          5.03          1.0          0.0          0.0   \n2077963  5194908          1.49          0.0          0.0          1.0   \n\n         cap-shape_o  cap-shape_p  cap-shape_s  cap-shape_x  cap-surface_d  \\\n0                0.0          0.0          0.0          1.0            0.0   \n1                1.0          0.0          0.0          0.0            0.0   \n2                0.0          0.0          0.0          0.0            0.0   \n3                0.0          0.0          0.0          1.0            0.0   \n4                0.0          0.0          0.0          1.0            0.0   \n...              ...          ...          ...          ...            ...   \n2077959          0.0          0.0          0.0          1.0            0.0   \n2077960          0.0          0.0          0.0          1.0            0.0   \n2077961          0.0          0.0          0.0          1.0            0.0   \n2077962          0.0          0.0          0.0          0.0            0.0   \n2077963          0.0          0.0          0.0          0.0            0.0   \n\n         ...  habitat_h  habitat_l  habitat_m  habitat_p  habitat_u  \\\n0        ...        0.0        0.0        0.0        0.0        0.0   \n1        ...        0.0        0.0        0.0        0.0        0.0   \n2        ...        0.0        0.0        0.0        0.0        0.0   \n3        ...        0.0        0.0        0.0        0.0        0.0   \n4        ...        0.0        0.0        0.0        0.0        0.0   \n...      ...        ...        ...        ...        ...        ...   \n2077959  ...        0.0        0.0        0.0        0.0        0.0   \n2077960  ...        0.0        0.0        0.0        0.0        0.0   \n2077961  ...        0.0        0.0        0.0        0.0        0.0   \n2077962  ...        0.0        0.0        0.0        0.0        0.0   \n2077963  ...        0.0        0.0        0.0        0.0        0.0   \n\n         habitat_w  season_a  season_s  season_u  season_w  \n0              0.0       1.0       0.0       0.0       0.0  \n1              0.0       1.0       0.0       0.0       0.0  \n2              0.0       0.0       1.0       0.0       0.0  \n3              0.0       0.0       0.0       1.0       0.0  \n4              0.0       0.0       0.0       1.0       0.0  \n...            ...       ...       ...       ...       ...  \n2077959        0.0       0.0       0.0       1.0       0.0  \n2077960        0.0       1.0       0.0       0.0       0.0  \n2077961        0.0       1.0       0.0       0.0       0.0  \n2077962        0.0       1.0       0.0       0.0       0.0  \n2077963        0.0       0.0       0.0       0.0       1.0  \n\n[2077964 rows x 92 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>cap-diameter</th>\n      <th>cap-shape_b</th>\n      <th>cap-shape_c</th>\n      <th>cap-shape_f</th>\n      <th>cap-shape_o</th>\n      <th>cap-shape_p</th>\n      <th>cap-shape_s</th>\n      <th>cap-shape_x</th>\n      <th>cap-surface_d</th>\n      <th>...</th>\n      <th>habitat_h</th>\n      <th>habitat_l</th>\n      <th>habitat_m</th>\n      <th>habitat_p</th>\n      <th>habitat_u</th>\n      <th>habitat_w</th>\n      <th>season_a</th>\n      <th>season_s</th>\n      <th>season_u</th>\n      <th>season_w</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3116945</td>\n      <td>1.49</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3116946</td>\n      <td>6.90</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3116947</td>\n      <td>2.00</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3116948</td>\n      <td>3.47</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3116949</td>\n      <td>6.17</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2077959</th>\n      <td>5194904</td>\n      <td>0.88</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2077960</th>\n      <td>5194905</td>\n      <td>3.12</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2077961</th>\n      <td>5194906</td>\n      <td>5.73</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2077962</th>\n      <td>5194907</td>\n      <td>5.03</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2077963</th>\n      <td>5194908</td>\n      <td>1.49</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>...</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>1.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2077964 rows × 92 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train_columns = set(X_transformed.columns)\ntest_columns = set(test_data.columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:45:35.206348Z","iopub.execute_input":"2024-08-08T16:45:35.207006Z","iopub.status.idle":"2024-08-08T16:45:35.211776Z","shell.execute_reply.started":"2024-08-08T16:45:35.206972Z","shell.execute_reply":"2024-08-08T16:45:35.210751Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"train_not_in_test = train_columns - test_columns\ntest_not_in_train = test_columns - train_columns\ncommon_columns = train_columns & test_columns\n\n\nprint(\"Columns in train but not in test:\", train_not_in_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:45:36.269113Z","iopub.execute_input":"2024-08-08T16:45:36.270075Z","iopub.status.idle":"2024-08-08T16:45:36.275567Z","shell.execute_reply.started":"2024-08-08T16:45:36.270037Z","shell.execute_reply":"2024-08-08T16:45:36.274473Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"Columns in train but not in test: set()\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Columns in test but not in train:\", test_not_in_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:45:40.348830Z","iopub.execute_input":"2024-08-08T16:45:40.349601Z","iopub.status.idle":"2024-08-08T16:45:40.354951Z","shell.execute_reply.started":"2024-08-08T16:45:40.349564Z","shell.execute_reply":"2024-08-08T16:45:40.353841Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"Columns in test but not in train: set()\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Common columns:\", common_columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:45:42.017007Z","iopub.execute_input":"2024-08-08T16:45:42.017969Z","iopub.status.idle":"2024-08-08T16:45:42.022862Z","shell.execute_reply.started":"2024-08-08T16:45:42.017933Z","shell.execute_reply":"2024-08-08T16:45:42.021772Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stdout","text":"Common columns: {'cap-color_r', 'gill-color_e', 'cap-surface_d', 'stem-color_o', 'gill-color_u', 'cap-color_y', 'habitat_h', 'stem-color_y', 'gill-spacing_d', 'habitat_l', 'ring-type_f', 'cap-color_w', 'season_u', 'gill-color_b', 'gill-attachment_e', 'gill-color_n', 'stem-color_b', 'gill-color_y', 'cap-shape_s', 'cap-diameter', 'cap-shape_c', 'cap-color_n', 'gill-color_k', 'gill-color_r', 'does-bruise-or-bleed_t', 'habitat_u', 'gill-color_f', 'stem-color_g', 'season_w', 'gill-color_o', 'cap-surface_w', 'stem-color_l', 'gill-spacing_c', 'cap-color_p', 'stem-color_n', 'stem-color_k', 'cap-color_l', 'gill-color_w', 'stem-height', 'gill-spacing_f', 'has-ring_f', 'cap-surface_t', 'gill-attachment_f', 'cap-surface_l', 'gill-color_p', 'cap-surface_y', 'cap-surface_k', 'does-bruise-or-bleed_f', 'ring-type_g', 'ring-type_p', 'cap-surface_s', 'cap-shape_x', 'cap-surface_h', 'cap-surface_e', 'cap-surface_i', 'stem-width', 'ring-type_z', 'season_s', 'has-ring_t', 'id', 'cap-shape_p', 'cap-color_k', 'gill-attachment_p', 'gill-color_g', 'stem-color_u', 'habitat_m', 'cap-shape_f', 'season_a', 'gill-attachment_d', 'stem-color_w', 'cap-color_o', 'cap-color_e', 'gill-attachment_a', 'ring-type_m', 'cap-surface_g', 'stem-color_p', 'ring-type_e', 'ring-type_l', 'stem-color_r', 'habitat_d', 'cap-color_b', 'stem-color_e', 'cap-shape_b', 'habitat_p', 'gill-attachment_x', 'habitat_g', 'gill-attachment_s', 'habitat_w', 'cap-color_u', 'cap-shape_o', 'cap-color_g', 'ring-type_r'}\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X_transformed, y, test_size=0.2)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:44:02.449513Z","iopub.execute_input":"2024-08-08T16:44:02.449867Z","iopub.status.idle":"2024-08-08T16:44:07.887347Z","shell.execute_reply.started":"2024-08-08T16:44:02.449836Z","shell.execute_reply":"2024-08-08T16:44:07.886313Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# from sklearn.ensemble import RandomForestClassifier \n# ran_clf = RandomForestClassifier()\n# model = ran_clf.fit(X_train, y_train)\n# model.score(X_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:34:00.315917Z","iopub.execute_input":"2024-08-08T16:34:00.316256Z","iopub.status.idle":"2024-08-08T16:34:00.329311Z","shell.execute_reply.started":"2024-08-08T16:34:00.316226Z","shell.execute_reply":"2024-08-08T16:34:00.328468Z"},"trusted":true},"execution_count":93,"outputs":[]},{"cell_type":"code","source":"# from sklearn.model_selection import RepeatedStratifiedKFold, cross_val_score\n# cv= RepeatedStratifiedKFold(random_state=42, n_splits=3, n_repeats=3)\n# n_scores = cross_val_score(ran_clf, X, y, scoring=\"accuracy\", cv=cv, error_score=\"raise\", n_jobs=-1)\n# avg = np.mean(n_scores)\n# print(avg)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:34:00.331649Z","iopub.execute_input":"2024-08-08T16:34:00.332288Z","iopub.status.idle":"2024-08-08T16:34:00.337731Z","shell.execute_reply.started":"2024-08-08T16:34:00.332258Z","shell.execute_reply":"2024-08-08T16:34:00.336848Z"},"trusted":true},"execution_count":94,"outputs":[]},{"cell_type":"code","source":"!nvidia-smi","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:34:00.338867Z","iopub.execute_input":"2024-08-08T16:34:00.339230Z","iopub.status.idle":"2024-08-08T16:34:01.569917Z","shell.execute_reply.started":"2024-08-08T16:34:00.339199Z","shell.execute_reply":"2024-08-08T16:34:01.568761Z"},"trusted":true},"execution_count":95,"outputs":[{"name":"stdout","text":"Thu Aug  8 16:34:01 2024       \n+-----------------------------------------------------------------------------------------+\n| NVIDIA-SMI 550.90.07              Driver Version: 550.90.07      CUDA Version: 12.4     |\n|-----------------------------------------+------------------------+----------------------+\n| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n|                                         |                        |               MIG M. |\n|=========================================+========================+======================|\n|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n| N/A   40C    P8              9W /   70W |       3MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n|   1  Tesla T4                       Off |   00000000:00:05.0 Off |                    0 |\n| N/A   42C    P8              9W /   70W |       3MiB /  15360MiB |      0%      Default |\n|                                         |                        |                  N/A |\n+-----------------------------------------+------------------------+----------------------+\n                                                                                         \n+-----------------------------------------------------------------------------------------+\n| Processes:                                                                              |\n|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n|        ID   ID                                                               Usage      |\n|=========================================================================================|\n|  No running processes found                                                             |\n+-----------------------------------------------------------------------------------------+\n","output_type":"stream"}]},{"cell_type":"code","source":"clf = xgb.XGBClassifier(tree_method='hist', device='cuda', early_stoppings_rounds=10)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:44:07.889022Z","iopub.execute_input":"2024-08-08T16:44:07.889675Z","iopub.status.idle":"2024-08-08T16:44:07.895006Z","shell.execute_reply.started":"2024-08-08T16:44:07.889634Z","shell.execute_reply":"2024-08-08T16:44:07.893738Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import RandomizedSearchCV\n\nparam_dist = {\n    'learning_rate': [0.01,0.02, 0.04, 0.07, 0.08, 0.05, 0.1],\n    'max_depth': [2, 4, 6, 8, 10],\n    'n_estimators': [100,200, 400, 500, 1000, 1500],\n    'subsample': [0.3, 0.5, 0.4,0.7, 0.8, 0.9, 1],\n    'colsample_bytree': [0.3, 0.5, 0.4,0.7, 0.8, 0.9, 1],\n    'gamma': [0, 1,2,3,4, 5, 10],\n    'alpha': [0, 1, 3, 7, 9, 6,  5, 10],\n    'reg_lambda': [0, 1, 3, 7, 9, 6,  5, 10] }\n\nclf = xgb.XGBClassifier(tree_method='hist', device='cuda')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:34:01.578617Z","iopub.execute_input":"2024-08-08T16:34:01.578943Z","iopub.status.idle":"2024-08-08T16:34:01.586540Z","shell.execute_reply.started":"2024-08-08T16:34:01.578910Z","shell.execute_reply":"2024-08-08T16:34:01.585500Z"},"trusted":true},"execution_count":97,"outputs":[]},{"cell_type":"code","source":"search = RandomizedSearchCV(\n    param_distributions=param_dist,\n    estimator=clf,\n    scoring='accuracy',\n    cv=5,\n    verbose=2,\n    n_jobs=-1,\n    random_state=42\n)\n\nsearch.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:34:05.526850Z","iopub.execute_input":"2024-08-08T16:34:05.527621Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","output_type":"stream"}]},{"cell_type":"code","source":"best_params = search.best_params_\nbest_params","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:32:17.949743Z","iopub.status.idle":"2024-08-08T16:32:17.950136Z","shell.execute_reply.started":"2024-08-08T16:32:17.949961Z","shell.execute_reply":"2024-08-08T16:32:17.949977Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"clf_best = xgb.XGBClassifier(\n    tree_method='hist',\n    device='cuda',\n    learning_rate= 0.1,\n    max_depth=8,\n    n_estimators=400,\n    subsample=0.3,\n    colsample_bytree=0.3,\n    gamma=0,\n    alpha=10,\n    reg_lambda=1\n)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:44:07.896510Z","iopub.execute_input":"2024-08-08T16:44:07.896872Z","iopub.status.idle":"2024-08-08T16:44:07.903668Z","shell.execute_reply.started":"2024-08-08T16:44:07.896838Z","shell.execute_reply":"2024-08-08T16:44:07.902717Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"clf.fit(X_train, y_train, eval_set=[(X_val, y_val)] , verbose=2, early_stopping_rounds=10)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:44:07.905050Z","iopub.execute_input":"2024-08-08T16:44:07.905467Z","iopub.status.idle":"2024-08-08T16:44:20.883326Z","shell.execute_reply.started":"2024-08-08T16:44:07.905422Z","shell.execute_reply":"2024-08-08T16:44:20.882377Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [16:44:17] WARNING: /workspace/src/learner.cc:742: \nParameters: { \"early_stoppings_rounds\" } are not used.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-logloss:0.59111\n[2]\tvalidation_0-logloss:0.47299\n[4]\tvalidation_0-logloss:0.40464\n[6]\tvalidation_0-logloss:0.36347\n[8]\tvalidation_0-logloss:0.31353\n[10]\tvalidation_0-logloss:0.29770\n[12]\tvalidation_0-logloss:0.27879\n[14]\tvalidation_0-logloss:0.24753\n[16]\tvalidation_0-logloss:0.23667\n[18]\tvalidation_0-logloss:0.22066\n[20]\tvalidation_0-logloss:0.20741\n[22]\tvalidation_0-logloss:0.18849\n[24]\tvalidation_0-logloss:0.17751\n[26]\tvalidation_0-logloss:0.16689\n[28]\tvalidation_0-logloss:0.15150\n[30]\tvalidation_0-logloss:0.14338\n[32]\tvalidation_0-logloss:0.12839\n[34]\tvalidation_0-logloss:0.12081\n[36]\tvalidation_0-logloss:0.11297\n[38]\tvalidation_0-logloss:0.10829\n[40]\tvalidation_0-logloss:0.10483\n[42]\tvalidation_0-logloss:0.09716\n[44]\tvalidation_0-logloss:0.09420\n[46]\tvalidation_0-logloss:0.09268\n[48]\tvalidation_0-logloss:0.09025\n[50]\tvalidation_0-logloss:0.08737\n[52]\tvalidation_0-logloss:0.08405\n[54]\tvalidation_0-logloss:0.08171\n[56]\tvalidation_0-logloss:0.07968\n[58]\tvalidation_0-logloss:0.07732\n[60]\tvalidation_0-logloss:0.07618\n[62]\tvalidation_0-logloss:0.07456\n[64]\tvalidation_0-logloss:0.07150\n[66]\tvalidation_0-logloss:0.06958\n[68]\tvalidation_0-logloss:0.06818\n[70]\tvalidation_0-logloss:0.06631\n[72]\tvalidation_0-logloss:0.06584\n[74]\tvalidation_0-logloss:0.06433\n[76]\tvalidation_0-logloss:0.06294\n[78]\tvalidation_0-logloss:0.06191\n[80]\tvalidation_0-logloss:0.06120\n[82]\tvalidation_0-logloss:0.06063\n[84]\tvalidation_0-logloss:0.05979\n[86]\tvalidation_0-logloss:0.05923\n[88]\tvalidation_0-logloss:0.05818\n[90]\tvalidation_0-logloss:0.05707\n[92]\tvalidation_0-logloss:0.05622\n[94]\tvalidation_0-logloss:0.05512\n[96]\tvalidation_0-logloss:0.05461\n[98]\tvalidation_0-logloss:0.05413\n[99]\tvalidation_0-logloss:0.05373\n","output_type":"stream"},{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device='cuda', early_stopping_rounds=None,\n              early_stoppings_rounds=10, enable_categorical=False,\n              eval_metric=None, feature_types=None, gamma=None,\n              grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, ...)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=&#x27;cuda&#x27;, early_stopping_rounds=None,\n              early_stoppings_rounds=10, enable_categorical=False,\n              eval_metric=None, feature_types=None, gamma=None,\n              grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=&#x27;cuda&#x27;, early_stopping_rounds=None,\n              early_stoppings_rounds=10, enable_categorical=False,\n              eval_metric=None, feature_types=None, gamma=None,\n              grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"clf.score(X_test, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:46:19.679790Z","iopub.execute_input":"2024-08-08T16:46:19.680203Z","iopub.status.idle":"2024-08-08T16:46:21.319280Z","shell.execute_reply.started":"2024-08-08T16:46:19.680169Z","shell.execute_reply":"2024-08-08T16:46:21.317942Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/xgboost/core.py:160: UserWarning: [16:46:19] WARNING: /workspace/src/common/error_msg.cc:58: Falling back to prediction using DMatrix due to mismatched devices. This might lead to higher memory usage and slower performance. XGBoost is running on: cuda:0, while the input data is on: cpu.\nPotential solutions:\n- Use a data structure that matches the device ordinal in the booster.\n- Set the device for booster before call to inplace_predict.\n\nThis warning will only be shown once.\n\n  warnings.warn(smsg, UserWarning)\n","output_type":"stream"},{"execution_count":43,"output_type":"execute_result","data":{"text/plain":"0.9877203479689247"},"metadata":{}}]},{"cell_type":"code","source":"class_pred = clf.predict(test_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:20:10.018354Z","iopub.status.idle":"2024-08-08T16:20:10.018695Z","shell.execute_reply.started":"2024-08-08T16:20:10.018527Z","shell.execute_reply":"2024-08-08T16:20:10.018542Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"np.unique(class_pred)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:20:10.020122Z","iopub.status.idle":"2024-08-08T16:20:10.020440Z","shell.execute_reply.started":"2024-08-08T16:20:10.020285Z","shell.execute_reply":"2024-08-08T16:20:10.020298Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({'id':test_data.id, 'class':class_pred})","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:20:10.021566Z","iopub.status.idle":"2024-08-08T16:20:10.021921Z","shell.execute_reply.started":"2024-08-08T16:20:10.021736Z","shell.execute_reply":"2024-08-08T16:20:10.021750Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission['class'] = submission['class'].map({0:'e', 1:'p'})","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:20:10.023287Z","iopub.status.idle":"2024-08-08T16:20:10.023609Z","shell.execute_reply.started":"2024-08-08T16:20:10.023432Z","shell.execute_reply":"2024-08-08T16:20:10.023444Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission['class'].value_counts().plot(kind='bar')","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:20:10.024612Z","iopub.status.idle":"2024-08-08T16:20:10.025011Z","shell.execute_reply.started":"2024-08-08T16:20:10.024794Z","shell.execute_reply":"2024-08-08T16:20:10.024810Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"submission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-08T16:20:10.025956Z","iopub.status.idle":"2024-08-08T16:20:10.026251Z","shell.execute_reply.started":"2024-08-08T16:20:10.026105Z","shell.execute_reply":"2024-08-08T16:20:10.026117Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow ","metadata":{},"execution_count":null,"outputs":[]}]}